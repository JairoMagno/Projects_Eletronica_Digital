module controlador
(
	output Clk_out = 1'b0,
	output reg Disparo = 1'b0, 
	output reg [27:0] Temp_out,
	output reg [27:0] Freq_out,	
	input Clk_in, Duracao	
);
	//overflow para frequencias da Música Frere Jacque
   `define F3  71633  //Fá3
	`define G3  63775  //Sol3
   `define A3  56818  //Lá 3
   `define Bb3 53648  //Sib3
   `define C4  47801  //Dó4
   `define D4  42553  //Ré4
   `define G4  31289  //Sol4
   `define F4  35790  //Fá4
	
	//overflow para tempos
	`define ov_t1_2 50000000/2 
	`define ov_t1   50000000 
	`define ov_t2   2*50000000  
	`define ov_t3   3*50000000   
	`define ov_t4   4*50000000   
	`define ov_t5   5*50000000   
	
	//FSM Declaração de estados 
	reg [5:0] estado, prox_estado;	
	localparam s0 = 6'b000000;   //define estado 0
	localparam s1 = 6'b000001;   //define estado 1
	localparam s2 = 6'b000011;   //define estado 2
	localparam s3 = 6'b000010;   //define estado 3
	localparam s4 = 6'b000100;   //define estado 4
	localparam s5 = 6'b000101;   //define estado 5
	localparam s6 = 6'b000110;   //define estado 6
	localparam s7 = 6'b000111;   //define estado 7
	localparam s8 = 6'b001000;   //define estado 8
	localparam s9 = 6'b001001;   //define estado 9
	localparam s10 = 6'b001010;  //define estado 10
	localparam s11 = 6'b001011;  //define estado 11
	localparam s12 = 6'b001100;  //define estado 12
	localparam s13 = 6'b001101;  //define estado 13
	localparam s14 = 6'b001110;  //define estado 14
	localparam s15 = 6'b001111;  //define estado 15
	localparam s16 = 6'b010000;  //define estado 16
	localparam s17 = 6'b010001;  //define estado 17
	localparam s18 = 6'b010010;  //define estado 18
	localparam s19 = 6'b010011;  //define estado 19
	localparam s20 = 6'b010100;  //define estado 20
	localparam s21 = 6'b010101;  //define estado 21
	localparam s22 = 6'b010110;  //define estado 22
	localparam s23 = 6'b010111;  //define estado 23
	localparam s24 = 6'b011000;  //define estado 24
	localparam s25 = 6'b011001;  //define estado 25
	localparam s26 = 6'b011010;  //define estado 26
	localparam s27 = 6'b011011;  //define estado 27
	localparam s28 = 6'b011100;  //define estado 28
	localparam s29 = 6'b011101;  //define estado 29
	localparam s30 = 6'b011110;  //define estado 30
	localparam s31 = 6'b011111;  //define estado 31
	localparam s32 = 6'b100000;  //define estado 32
	
	//FSM Lógica para controle do estado atual
	always @ (posedge Clk_in)
	begin : L1
		estado <= prox_estado;
	end
	
	//FSM Lógica para controle do próximo estado
	always @ (posedge Clk_in)//Combinacional 
	begin : L2
		case (estado)
			s0:  if (!Duracao) prox_estado <= s1;//próximo estado	
			s1:  if (!Duracao) prox_estado <= s2;//próximo estado
			s2:  if (!Duracao) prox_estado <= s3;//próximo estado
			s3:  if (!Duracao) prox_estado <= s4;//próximo estado	
			s4:  if (!Duracao) prox_estado <= s5;//próximo estado
			s5:  if (!Duracao) prox_estado <= s6;//próximo estado
			s6:  if (!Duracao) prox_estado <= s7;//próximo estado	
			s7:  if (!Duracao) prox_estado <= s8;//próximo estado
			s8:  if (!Duracao) prox_estado <= s9;//próximo estado
			s9:  if (!Duracao) prox_estado <= s10;//próximo estado	
			s10: if (!Duracao) prox_estado <= s11;//próximo estado
			s11: if (!Duracao) prox_estado <= s12;//próximo estado
			s12: if (!Duracao) prox_estado <= s13;//próximo estado	
			s13: if (!Duracao) prox_estado <= s14;//próximo estado
			s14: if (!Duracao) prox_estado <= s15;//próximo estado
			s15: if (!Duracao) prox_estado <= s16;//próximo estado	
			s16: if (!Duracao) prox_estado <= s17;//próximo estado
			s17: if (!Duracao) prox_estado <= s18;//próximo estado
			s18: if (!Duracao) prox_estado <= s19;//próximo estado	
			s19: if (!Duracao) prox_estado <= s20;//próximo estado
			s20: if (!Duracao) prox_estado <= s21;//próximo estado
			s21: if (!Duracao) prox_estado <= s22;//próximo estado	
			s22: if (!Duracao) prox_estado <= s23;//próximo estado
			s23: if (!Duracao) prox_estado <= s24;//próximo estado
			s24: if (!Duracao) prox_estado <= s25;//próximo estado	
			s25: if (!Duracao) prox_estado <= s26;//próximo estado
			s26: if (!Duracao) prox_estado <= s27;//próximo estado
			s27: if (!Duracao) prox_estado <= s28;//próximo estado	
			s28: if (!Duracao) prox_estado <= s29;//próximo estado
			s29: if (!Duracao) prox_estado <= s30;//próximo estado
			s30: if (!Duracao) prox_estado <= s31;//próximo estado	
			s31: if (!Duracao) prox_estado <= s32;//próximo estado
			s32: if (!Duracao) prox_estado <= s0;//próximo estado
			default: prox_estado <= s0; //recupera de estado inválido
		endcase
	end	
	
	//FSM Lógica para controle das saídas
	always @ (estado)//Combinacional 
	begin : L3
		case (estado) //s0 apenas inicia a prox nota	
			s0:  nota(0,`ov_t4);      //freq atual, dur prox
         s1:  nota(`F3,`ov_t1);     //freq atual, dur prox
         s2:  nota(`G3,`ov_t1);     //freq atual, dur prox	
			s3:  nota(`A3,`ov_t1);     //freq atual, dur prox
         s4:  nota(`F3,`ov_t1);     //freq atual, dur prox
			s5:  nota(`F3,`ov_t1);     //freq atual, dur prox
         s6:  nota(`G3,`ov_t1);     //freq atual, dur prox
			s7:  nota(`A3,`ov_t1);     //freq atual, dur prox
         s8:  nota(`F3,`ov_t1);     //freq atual, dur prox
			s9:  nota(`A3,`ov_t1);     //freq atual, dur prox
         s10: nota(`Bb3,`ov_t1);    //freq atual, dur prox
			s11: nota(`C4,`ov_t2);     //freq atual, dur prox
         s12: nota(`A3,`ov_t1);     //freq atual, dur prox
			s13: nota(`Bb3,`ov_t1);    //freq atual, dur prox
         s14: nota(`C4,`ov_t2);     //freq atual, dur prox
			s15: nota(`C4,`ov_t1_2);   //freq atual, dur prox
         s16: nota(`D4,`ov_t1_2);   //freq atual, dur prox
			s17: nota(`C4,`ov_t1_2);   //freq atual, dur prox
			s18: nota(`Bb3,`ov_t1_2);  //freq atual, dur prox
         s19: nota(`A3,`ov_t1);     //freq atual, dur prox
			s20: nota(`F3,`ov_t1);     //freq atual, dur prox
         s21: nota(`C4,`ov_t1_2);   //freq atual, dur prox
			s22: nota(`D4,`ov_t1_2);   //freq atual, dur prox
         s23: nota(`C4,`ov_t1_2);   //freq atual, dur prox
			s24: nota(`Bb3,`ov_t1_2);  //freq atual, dur prox
			s25: nota(`A3,`ov_t1);     //freq atual, dur prox
			s26: nota(`F3,`ov_t1);     //freq atual, dur prox
         s27: nota(`G3,`ov_t1);     //freq atual, dur prox
			s28: nota(`C4,`ov_t1);     //freq atual, dur prox
         s29: nota(`F4,`ov_t2);     //freq atual, dur prox
			s30: nota(`G4,`ov_t1);     //freq atual, dur prox
         s31: nota(`C4,`ov_t1);     //freq atual, dur prox
			s32: nota(`F4,`ov_t2);     //freq atual, dur prox		
		endcase
	end
	
	//Atribuição contínua
	assign Clk_out = Duracao & Clk_in;	
	
	//Tarefa para atribuição de saídas nos estados
	task nota( input [27:0] ov_f, ov_t);
	begin
		Temp_out = ov_t; //define a duração	proxima nota			
		Freq_out = ov_f; //define a frequência nota atual
		Disparo = 1'b1;  //dispara o temp a próxima nota		
	end
	endtask
	
endmodule		
		