LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE WORK.lcd_vhdl_package.ALL;

ENTITY Logica_LCD IS
  PORT( 	clk      : IN  std_logic;  --clock principal			
			lcd_busy : IN  std_logic;  --feedback do controlador (1)ocupado/(0)disponível		
			selector : IN 	std_logic;
			lcd_e 	: OUT std_logic;  --retem os dados no controlador LCD
			lcd_bar	: OUT std_logic_vector(9 DOWNTO 0)  --(9) rs (8) rw (7..0) dado char
		);
END Logica_LCD;
ARCHITECTURE bhv OF Logica_LCD IS
	--Registradores
	SIGNAL lcd_enable : std_logic;
	SIGNAL lcd_bus    : std_logic_vector(9 DOWNTO 0);
	--Barramento de dados do display
	SIGNAL L1 : std_logic_vector (127 DOWNTO 0);--Primeira Linha (128 bits, ja que cada caracter possue 8 bits)
	SIGNAL L2 : std_logic_vector (127 DOWNTO 0);--Segunda Linha  (128 bits, ja que cada caracter possue 8 bits)
	
	--constantes                                           --Pensar em outra função para se usar
	CONSTANT frase1_1 : std_logic_vector (127 DOWNTO 0);--Frase 1 linha 1
	CONSTANT frase1_2 : std_logic_vector (127 DOWNTO 0);--frase 1 linha 2
	CONSTANT frase2_1 : std_logic_vector (127 DOWNTO 0);--frase 2 linha 1
	CONSTANT frase2_2 : std_logic_vector (127 DOWNTO 0);--frase 2 linha 2
BEGIN
	--atribuição contínua das saídas registradas
	lcd_e <= lcd_enable;   --Ocorre de forma concorrente. Circuito Combinacional
	lcd_bar <= lcd_bus; 

	L1 <= frase1_1 WHEN (selector = '1') ELSE frase2_1;
	L2 <= frase1_2 WHEN (selector = '1') ELSE frase2_2;


  --Sequenciamento do envio de cada caractere de L1 e L2
  IF(selector = '1') THEN
  PROCESS(clk)
    VARIABLE char  :  INTEGER RANGE 0 TO 34 := 0; --6 bits
  BEGIN
    IF rising_edge(clk) THEN
      IF (lcd_busy = '0' AND lcd_enable = '0') THEN
        lcd_enable <= '1'; --habilita o LCD
        IF (char < 34) THEN
          char := char + 1; --incrementa o estado
			ELSE char := 0; --reinicia o estado
        END IF;
        CASE char IS --verifica o estado atual
			 WHEN 0  => lcd_bus <= "00" & "10000000"; --inst. linha 1 // (" Frere Jacques  ")
          WHEN 1  => lcd_bus <= "10" & L1(127 DOWNTO 120) <= B"00000000"; --prim. char da linha 1//espaço
          WHEN 2  => lcd_bus <= "10" & L1(119 DOWNTO 112) <= B"01000110"; --F
          WHEN 3  => lcd_bus <= "10" & L1(111 DOWNTO 104) <= B"01110010"; --r
          WHEN 4  => lcd_bus <= "10" & L1(103 DOWNTO 96)  <= B"01100101"; --e
          WHEN 5  => lcd_bus <= "10" & L1(95 DOWNTO 88)   <= B"01110010"; --r
          WHEN 6  => lcd_bus <= "10" & L1(87 DOWNTO 80)   <= B"01100101"; --e 
          WHEN 7  => lcd_bus <= "10" & L1(79 DOWNTO 72)   <= B"00000000"; --espaço
          WHEN 8  => lcd_bus <= "10" & L1(71 DOWNTO 64)   <= B"01001010"; --J
          WHEN 9  => lcd_bus <= "10" & L1(63 DOWNTO 56)   <= B"01100001"; --a
			 WHEN 10 => lcd_bus <= "10" & L1(55 DOWNTO 48)   <= B"01100011"; --c
			 WHEN 11 => lcd_bus <= "10" & L1(47 DOWNTO 40)   <= B"11110001"; --q
			 WHEN 12 => lcd_bus <= "10" & L1(39 DOWNTO 32)   <= B"01110101"; --u
			 WHEN 13 => lcd_bus <= "10" & L1(31 DOWNTO 24)   <= B"01100101"; --e
			 WHEN 14 => lcd_bus <= "10" & L1(23 DOWNTO 16)   <= B"01110011"; --s
			 WHEN 15 => lcd_bus <= "10" & L1(15 DOWNTO 8)    <= B"00000000"; --espaço
			 WHEN 16 => lcd_bus <= "10" & L1(7 DOWNTO 0)     <= B"00000000"; --ult char da linha 1//espaço
			 WHEN 17 => lcd_bus <= "00" & "11000000"; --inst. linha 2 // ("Popular Francesa")
          WHEN 18 => lcd_bus <= "10" & L2(127 DOWNTO 120) <= B"01010000"; --prim. char da linha 2//P
          WHEN 19 => lcd_bus <= "10" & L2(119 DOWNTO 112) <= B"01101111"; --o
          WHEN 20 => lcd_bus <= "10" & L2(111 DOWNTO 104) <= B"01110000"; --p
          WHEN 21 => lcd_bus <= "10" & L2(103 DOWNTO 96)  <= B"01110101"; --u
          WHEN 22 => lcd_bus <= "10" & L2(95 DOWNTO 88)   <= B"01101100"; --l
          WHEN 23 => lcd_bus <= "10" & L2(87 DOWNTO 80)   <= B"01100001"; --a
          WHEN 24 => lcd_bus <= "10" & L2(79 DOWNTO 72)   <= B"01110010"; --r
          WHEN 25 => lcd_bus <= "10" & L2(71 DOWNTO 64)   <= B"00000000"; --espaço
          WHEN 26 => lcd_bus <= "10" & L2(63 DOWNTO 56)   <= B"01000110"; --F
			 WHEN 27 => lcd_bus <= "10" & L2(55 DOWNTO 48)   <= B"01110010"; --r
			 WHEN 28 => lcd_bus <= "10" & L2(47 DOWNTO 40)   <= B"01100001"; --a
			 WHEN 29 => lcd_bus <= "10" & L2(39 DOWNTO 32)   <= B"01101110"; --n
			 WHEN 30 => lcd_bus <= "10" & L2(31 DOWNTO 24)   <= B"01100011"; --c
			 WHEN 31 => lcd_bus <= "10" & L2(23 DOWNTO 16)   <= B"01100101"; --e
			 WHEN 32 => lcd_bus <= "10" & L2(15 DOWNTO 8)    <= B"01110011"; --s
			 WHEN 33 => lcd_bus <= "10" & L2(7 DOWNTO 0)     <= B"01100001";--ult. char da linha 2//a			 
          WHEN OTHERS => lcd_enable <= '0'; --desabilita o LCD
        END CASE;
      ELSE
        lcd_enable <= '0'; --desabilita o LCD
      END IF;
    END IF;
  END PROCESS;
  
  ELSE
  PROCESS(clk)
    VARIABLE char  :  INTEGER RANGE 0 TO 34 := 0; --6 bits
  BEGIN
    IF rising_edge(clk) THEN
      IF (lcd_busy = '0' AND lcd_enable = '0') THEN
        lcd_enable <= '1'; --habilita o LCD
        IF (char < 34) THEN
          char := char + 1; --incrementa o estado
			ELSE char := 0; --reinicia o estado
        END IF;
        CASE char IS --verifica o estado atual
			 WHEN 0  => lcd_bus <= "00" & "10000000"; --inst. linha 1 // ("Over The Rainbow")
          WHEN 1  => lcd_bus <= "10" & L1(127 DOWNTO 120) <= B"01001111"; --prim. char da linha 1//O
          WHEN 2  => lcd_bus <= "10" & L1(119 DOWNTO 112) <= B"01110110"; --v
          WHEN 3  => lcd_bus <= "10" & L1(111 DOWNTO 104) <= B"01100101"; --e
          WHEN 4  => lcd_bus <= "10" & L1(103 DOWNTO 96)  <= B"01110010"; --r
          WHEN 5  => lcd_bus <= "10" & L1(95 DOWNTO 88)   <= B"00000000"; --espaço
          WHEN 6  => lcd_bus <= "10" & L1(87 DOWNTO 80)   <= B"01010100"; --T
          WHEN 7  => lcd_bus <= "10" & L1(79 DOWNTO 72)   <= B"01101000"; --h
          WHEN 8  => lcd_bus <= "10" & L1(71 DOWNTO 64)   <= B"01100101"; --e
          WHEN 9  => lcd_bus <= "10" & L1(63 DOWNTO 56)   <= B"00000000"; --espaço
			 WHEN 10 => lcd_bus <= "10" & L1(55 DOWNTO 48)   <= B"01010010"; --R
			 WHEN 11 => lcd_bus <= "10" & L1(47 DOWNTO 40)   <= B"01100001"; --a
			 WHEN 12 => lcd_bus <= "10" & L1(39 DOWNTO 32)   <= B"01101001"; --i
			 WHEN 13 => lcd_bus <= "10" & L1(31 DOWNTO 24)   <= B"01101110"; --n
			 WHEN 14 => lcd_bus <= "10" & L1(23 DOWNTO 16)   <= B"01100010"; --b
			 WHEN 15 => lcd_bus <= "10" & L1(15 DOWNTO 8)    <= B"01101111"; --o
			 WHEN 16 => lcd_bus <= "10" & L1(7 DOWNTO 0)     <= B"01110111"; --ult char da linha 1//w
			 WHEN 17 => lcd_bus <= "00" & "11000000"; --inst. linha 2 // ("  Yip Harburg   ")
          WHEN 18 => lcd_bus <= "10" & L2(127 DOWNTO 120) <= B"00000000"; --prim. char da linha 2//espaço
          WHEN 19 => lcd_bus <= "10" & L2(119 DOWNTO 112) <= B"00000000"; --espaço
          WHEN 20 => lcd_bus <= "10" & L2(111 DOWNTO 104) <= B"01011001"; --Y
          WHEN 21 => lcd_bus <= "10" & L2(103 DOWNTO 96)  <= B"01101001"; --i
          WHEN 22 => lcd_bus <= "10" & L2(95 DOWNTO 88)   <= B"01110000"; --p
          WHEN 23 => lcd_bus <= "10" & L2(87 DOWNTO 80)   <= B"00000000"; --espaço
          WHEN 24 => lcd_bus <= "10" & L2(79 DOWNTO 72)   <= B"01001000"; --H
          WHEN 25 => lcd_bus <= "10" & L2(71 DOWNTO 64)   <= B"01100001"; --a
          WHEN 26 => lcd_bus <= "10" & L2(63 DOWNTO 56)   <= B"01110010"; --r
			 WHEN 27 => lcd_bus <= "10" & L2(55 DOWNTO 48)   <= B"01100010"; --b
			 WHEN 28 => lcd_bus <= "10" & L2(47 DOWNTO 40)   <= B"01110101"; --u
			 WHEN 29 => lcd_bus <= "10" & L2(39 DOWNTO 32)   <= B"01110010"; --r
			 WHEN 30 => lcd_bus <= "10" & L2(31 DOWNTO 24)   <= B"01100111"; --g
			 WHEN 31 => lcd_bus <= "10" & L2(23 DOWNTO 16)   <= B"00000000"; --espaço
			 WHEN 32 => lcd_bus <= "10" & L2(15 DOWNTO 8)    <= B"00000000"; --espaço
			 WHEN 33 => lcd_bus <= "10" & L2(7 DOWNTO 0)     <= B"00000000";--ult. char da linha 2//espaço
        END CASE;
      ELSE
        lcd_enable <= '0'; --desabilita o LCD
      END IF;
    END IF;
  END PROCESS;  
END bhv;